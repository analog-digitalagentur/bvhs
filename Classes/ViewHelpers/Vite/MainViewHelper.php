<?php

declare(strict_types=1);

namespace Bo\Bvhs\ViewHelpers\Vite;

use B13\Assetcollector\AssetCollector;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Core\Utility\PathUtility;
use TYPO3Fluid\Fluid\Core\ViewHelper\AbstractViewHelper;

/**
 * MainViewHelper integrates Vite into TYPO3, allowing the use of Vite's build system and development server.
 *
 * Example usage:
 * <b:vite.main outdir="fileadmin/sitepackage/Resources/Public" input="src/main.js" port="5999" additionalAttributes="{data-cookieconsent: 'ignore'}" />
 *
 * Arguments:
 * - outdir (string, required): The Vite output directory (manifest.json location from sitepackage root).
 * - input (string, required): The Vite main entry file (main.js location from sitepackage root).
 * - port (int, optional): The port for the Vite development server (default: 5999).
 * - additionalAttributes (array, optional): Additional attributes for the script and link tags.
 *
 * The ViewHelper will automatically detect if you are in Vite development mode by checking the VUE_DEVELOPMENT
 * environment variable. If it's set to true, the ViewHelper will include the Vite client script and main entry
 * script from the Vite development server. Otherwise, it will include the built JavaScript and CSS files
 * generated by Vite from the output directory.
 */
class MainViewHelper extends AbstractViewHelper
{
    protected AssetCollector $assetCollector;

    public function __construct(AssetCollector $assetCollector)
    {
        $this->assetCollector = $assetCollector;
    }

    public function initializeArguments(): void
    {
        parent::initializeArguments();
        $this->registerArgument(
            "outdir",
            "string",
            "Vite output directory (manifest.json location from sitepackage root)",
            true
        );
        $this->registerArgument(
            "input",
            "string",
            "Vite main entry file (main.js location from sitepackage root)",
            true
        );
        $this->registerArgument(
            "port",
            "int",
            "Optional: Port for the Vite development server (default: 5999)",
            false,
            5999
        );
        $this->registerArgument(
            "additionalAttributes",
            "array",
            "Optional: Additional attributes for the script and link tags",
            false,
            []
        );
    }

    public function render(): void
    {
        $currentApplicationContext = \TYPO3\CMS\Core\Core\Environment::getContext()->__toString();
        $absoluteOutdir = GeneralUtility::getFileAbsFileName($this->arguments["outdir"]);
        $relativeOutdir = PathUtility::getRelativePathTo($absoluteOutdir);

        $vueDevelopment = getenv("VUE_DEVELOPMENT");

        $additionalAttributes = $this->arguments["additionalAttributes"];
        $additionalAttributesString = "";
        foreach ($additionalAttributes as $key => $value) {
            $additionalAttributesString .= ' ' . htmlspecialchars($key) . '="' . htmlspecialchars($value) . '"';
        }

        if ($vueDevelopment == true) {
            $pageRenderer = GeneralUtility::makeInstance(\TYPO3\CMS\Core\Page\PageRenderer::class);
            $pageRenderer->addHeaderData(
                '<script type="module" src="http://localhost:' .
                $this->arguments["port"] .
                "/" .
                $relativeOutdir .
                '@vite/client"' .
                $additionalAttributesString .
                '></script>'
            );
            $pageRenderer->addHeaderData(
                '<script type="module" src="http://localhost:' .
                $this->arguments["port"] .
                "/" .
                $relativeOutdir .
                $this->arguments["input"] .
                '"' .
                $additionalAttributesString .
                '></script>'
            );
        } else {
            $file = file_get_contents($absoluteOutdir . "/manifest.json");
            $manifest = json_decode($file, true);
            if (!str_ends_with($relativeOutdir, "/")) {
                $relativeOutdir .= "/";
            }

            $mainJsFile = $relativeOutdir . $manifest[$this->arguments["input"]]["file"];
            if ($mainJsFile) {
                $this->assetCollector->addJavaScriptFile($mainJsFile, array_merge(["type" => "module", "async" => "true"], $additionalAttributes));
            }

            if ($manifest[$this->arguments["input"]]["css"]) {
                foreach ($manifest[$this->arguments["input"]]["css"] as $maincssfile) {
                    $this->assetCollector->addCssFile($relativeOutdir . $maincssfile, $additionalAttributes);
                }
            }
        }
    }
}
